// Generated by CoffeeScript 1.12.4
var runTasks, slice = [].slice;

import MiniPromise from './mini_promise'

export default runTasks = function(tasks, arg) {
  var args, fail, origin, promise, ref, runNext, success;
  fail = arg.fail, success = arg.success, origin = arg.origin, args = (ref = arg.args) != null ? ref : {};
  promise = MiniPromise();
  runNext = function(tasks, _a) {
    var a, execute, handleResult, k, otherTasks, reportError, start, task, v;
    task = tasks[0], otherTasks = 2 <= tasks.length ? slice.call(tasks, 1) : [];
    a = {};
    for (k in _a) {
      v = _a[k];
      a[k] = v;
    }
    if (tasks.length === 0) {
      success(a);
      return;
    }
    start = function() {
      var e;
      try {
        return execute();
      } catch (error) {
        e = error;
        reportError(e);
        throw e;
      }
    };
    execute = function() {
      return promise.include(task(a, handleResult));
    };
    handleResult = function(answer) {
      if (answer === null) {
        throw Error("callback called without value");
      } else if (answer.error != null) {
        if (task.debug) {
          console.log(task.debug + " returned ", answer);
        }
        return fail(answer);
      } else {
        for (k in answer) {
          v = answer[k];
          a[k] = v;
        }
        return runNext(otherTasks, a);
      }
    };
    reportError = function(e) {
      if (origin) {
        console.error("");
        console.error("### Error running tasks defined in " + origin);
      }
      if (task.debug != null) {
        return console.error("# " + task.debug);
      }
    };
    return start();
  };
  runNext(tasks, args);
  return promise;
};
