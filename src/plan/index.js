// Generated by CoffeeScript 1.12.4
var Plan, _getCallerFile, slice = [].slice

import runTasks from './run_tasks'
import MiniPromise from './mini_promise'

export default Plan = function() {
  var i, origin, success, tasks;
  tasks = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), success = arguments[i++];
  origin = _getCallerFile();
  return function(args, cb) {
    var argsdup, dup, k, promise, v;
    promise = MiniPromise();
    argsdup = {};
    for (k in args) {
      v = args[k];
      argsdup[k] = v;
    }
    dup = tasks.slice(0);
    promise.include(runTasks(dup, {
      args: argsdup,
      fail: cb,
      origin: origin,
      success: function(stuff) {
        var ret;
        ret = success(stuff, function(result) {
          return typeof cb === "function" ? cb(result) : void 0;
        });
        return promise.include(ret);
      }
    }));
    return promise;
  };
};

Plan.async = function() {
  var plan, tasks;
  tasks = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return plan = function(args, cb) {
    var i, len, promise, task;
    promise = MiniPromise();
    for (i = 0, len = tasks.length; i < len; i++) {
      task = tasks[i];
      promise.include(task(args, function(stuff) {
        return typeof cb === "function" ? cb(stuff) : void 0;
      }));
    }
    return promise;
  };
};

_getCallerFile = function() {
  var callerfile, currentfile, e, err, originalFunc;
  originalFunc = Error.prepareStackTrace;
  callerfile = null;
  try {
    err = new Error();
    Error.prepareStackTrace = function(err, stack) {
      return stack;
    };
    currentfile = err.stack.shift().getFileName();
    while (err.stack.length) {
      callerfile = err.stack.shift().getFileName();
      if (currentfile !== callerfile && !/plan.coffee/.test(callerfile)) {
        break;
      }
    }
  } catch (error) {
    e = error;
  }
  Error.prepareStackTrace = originalFunc;
  return callerfile;
};

