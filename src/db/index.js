// Generated by CoffeeScript 1.12.4
(function() {
  var auth, config, connectionString, pad, params, pg, pool, query, sqlify, url,
    slice = [].slice;

  url = require('url');

  pg = require('pg');

  require('colors');

  connectionString = process.env.DATABASE_URL || 'postgres://mika:mika@localhost/mika';

  params = url.parse(connectionString);

  auth = params.auth.split(':');

  config = {
    user: auth[0],
    password: auth[1],
    host: params.hostname,
    port: params.port,
    database: params.pathname.split('/')[1],
    ssl: true,
    max: 5,
    idleTimeoutMillis: 30000
  };

  pool = new pg.Pool(config);

  query = function() {
    var args, cb, j, query;
    query = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, j = arguments.length - 1) : (j = 1, []), cb = arguments[j++];
    pool.connect(function(err, client, done) {
      var con, timing;
      if (err) {
        console.log('Err in SQL query!');
        throw err;
      }
      timing = new Date().getTime();
      return con = client.query(query, args, function(err, results) {
        var ref, rows, sql, table;
        if (err) {
          throw err;
        }
        timing = new Date().getTime() - timing;
        if (timing > 50) {
          ref = sqlify(query, args), table = ref[0], sql = ref[1];
          rows = (results.rows.length.toString()) + " row";
          if (results.rows.length > 1) {
            rows += "s";
          }
          rows = pad(rows, 8).magenta;
          console.log(pad(timing + "ms ", 6).cyan, table, rows, sql);
        }
        done();
        return cb(results.rows);
      });
    });
  };

  query.end = function() {
    return pg.end();
  };

  module.exports = query;

  sqlify = function(h, args) {
    var a, arg, e, i, j, len, m, tableName;
    tableName = (m = /(from|into) (\w+)/i.exec(h)) && m[2] || 'other';
    try {
      for (i = j = 0, len = args.length; j < len; i = ++j) {
        arg = args[i];
        a = (JSON.stringify(arg) || 'null').replace(/^"|"$/g, "'");
        if (a.length > 150) {
          a = a.slice(0, 151) + "...'";
        }
        h = h.replace('$' + (i + 1), a);
      }
    } catch (error) {
      e = error;
      return e;
    }
    h = h.replace(/from |select |delete |insert into| where| limit| order by| asc| desc/ig, function(s) {
      return s.toUpperCase().green;
    });
    h = h.replace(/,/g, ','.green);
    h = h.replace(/'.*?'/g, function(s) {
      return s.yellow;
    });
    return [pad("(" + tableName + ")", 20).red, h];
  };

  pad = function(str, num) {
    while (str.length < num) {
      str = str + " ";
    }
    return str;
  };

}).call(this);
