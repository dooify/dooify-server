// Generated by CoffeeScript 1.12.4
(function() {
  var Model, Test, assert, chai, query, reset_db;

  reset_db = require('./reset_db');

  chai = require('chai');

  assert = chai.assert;

  query = require('../');

  Model = require('../model');

  Test = Model({
    tableName: 'test',
    columns: {
      value1: 'value1',
      value2: 'value_2'
    },
    validate: function(data) {
      return true;
    }
  });

  describe('Model', function() {
    before(function(done) {
      return reset_db(function() {
        return query("CREATE TABLE test (id text, value1 text, value_2 text, created_at timestamp, updated_at timestamp);", function() {
          return done();
        });
      });
    });
    describe('new', function() {
      it('should have a string ID', function(done) {
        var newTest;
        newTest = Test();
        assert.equal(typeof newTest.get('id'), 'string');
        assert.notEqual('', newTest.get('id'));
        newTest.get('id');
        return done();
      });
      it('should fail when trying to access a field which doesn\'t exist', function(done) {
        var e, newTest;
        try {
          newTest = Test();
          return newTest.get('nonexistant');
        } catch (error) {
          e = error;
          return done();
        }
      });
      return it('should always remove leading and trailing space if string', function(done) {
        var newTest;
        newTest = Test({
          value2: ' \t\r\nmlupbup \r'
        });
        assert.equal(newTest.get('value2'), 'mlupbup');
        return done();
      });
    });
    describe('save', function() {
      it('should create the record in the database', function(done) {
        var u;
        u = Test({
          value1: 'one',
          value2: 'two'
        });
        return u.save(function() {
          return query('select * from test', function(tests) {
            assert.equal(tests.length, 1);
            assert.equal(u.get('id'), tests[0].id);
            assert.equal('one', tests[0].value1);
            assert.equal('two', tests[0].value_2);
            assert.equal(true, tests[0].created_at.getMonth != null);
            assert.equal(true, tests[0].updated_at.getMonth != null);
            return done();
          });
        });
      });
      return it('should update row', function(done) {
        return query("INSERT INTO test VALUES ( 'x1', 'dog', 'two' )", function() {
          var u;
          u = Test({
            _hasDbRow: true,
            id: 'x1',
            value1: 'dog',
            value2: 'two'
          });
          u.set('value1', '1');
          return u.save(function() {
            return query("select * from test where id = 'x1'", function(tests) {
              assert.equal('1', tests[0].value1);
              return done();
            });
          });
        });
      });
    });
    describe('find', function() {
      before(function(done) {
        return query("INSERT INTO test VALUES ( 'uniqid', 'duck', 'rabbit' )", function() {
          return done();
        });
      });
      it('should find the record in the database', function(done) {
        return Test.find('uniqid', function(u) {
          assert.equal(u.get('id'), 'uniqid');
          assert.equal(u.get('value1'), 'duck');
          assert.equal(u.get('value2'), 'rabbit');
          return done();
        });
      });
      return it('should deep_check values', function(done) {
        return Test.find('uniqid', function(u1) {
          return Test.find('uniqid', function(u2) {
            assert.isTrue(u1.equals(u2));
            return done();
          });
        });
      });
    });
    return describe('where', function() {
      before(function(done) {
        return query("INSERT INTO test VALUES ( 'u1', 'alpha', '1' ), ( 'u2', 'beta', '2' ), ( 'u4', 'beta', '2' ), ( 'u3', 'omega', '3' )", function() {
          return done();
        });
      });
      return it('should find the record in the database', function(done) {
        return Test.where({
          value1: 'beta',
          id: 'u2'
        }, function(tests) {
          var t;
          assert.equal(tests.length, 1);
          t = tests[0];
          assert.equal(t.get('id'), 'u2');
          assert.equal(t.get('value1'), 'beta');
          assert.equal(t.get('value2'), '2');
          return done();
        });
      });
    });
  });

}).call(this);
