// Generated by CoffeeScript 1.12.4
(function() {
  var Plan, attemptFetchSpecifiedSize, c, convertIfNecessary, ensureCorrectWidth, fs, log, sharp, tmp;

  Plan = require('./helpers/plan');

  c = require('./common_tasks');

  sharp = require('sharp');

  tmp = require('tmp');

  fs = require('fs');

  log = require('../log');

  ensureCorrectWidth = function(arg, cb) {
    var id, width;
    width = arg.width, id = arg.id;
    log('ensureCorrectWidth');
    return cb({});
  };

  attemptFetchSpecifiedSize = function(arg, cb) {
    var Image, id, width;
    width = arg.width, id = arg.id;
    log('attemptFetchSpecifiedSize');
    Image = require('../db/image_' + width);
    return Image.where({
      imageId: id
    }, {
      limit: 1
    }, function(images) {
      if (!(images.length > 0)) {
        return cb({});
      } else {
        return cb({
          image: images[0]
        });
      }
    });
  };

  convertIfNecessary = function(arg, cb) {
    var Image, id, image, width;
    image = arg.image, width = arg.width, id = arg.id;
    log('convertIfNecessary');
    width = parseInt(width);
    if (image) {
      cb({});
      return;
    }
    Image = require('../db/image');
    return Image.find(id, function(image) {
      var a, base, buf, comma, encoding;
      if (!image) {
        cb({
          error: 'does not exist',
          description: "The image " + id + " does not exist"
        });
        return;
      }
      a = image.get('image');
      comma = a.indexOf(',') + 1;
      encoding = a.slice(0, comma);
      base = a.slice(comma);
      buf = Buffer.from(base, 'base64');
      return sharp(buf).resize(width).jpeg().toBuffer(function(err, buffer, info) {
        var ImageX, newImage;
        if (err && !(err === {})) {
          console.log(err);
          return cb({
            error: 'could not resize',
            description: err
          });
        } else {
          newImage = 'data:image/jpeg;base64,' + buffer.toString('base64');
          ImageX = require('../db/image_' + width);
          image = ImageX({
            imageId: image.get('id'),
            image: newImage
          });
          return image.save(function() {
            return cb({
              image: image
            });
          });
        }
      });
    });
  };

  module.exports = Plan(ensureCorrectWidth, attemptFetchSpecifiedSize, convertIfNecessary, c.select('image'));

}).call(this);
