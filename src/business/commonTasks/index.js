// Generated by CoffeeScript 1.12.4

import Session from '../../logic/session'
import User from '../../db/user'
import Query from './query'
import parse from './parse'

const t = {

  create(model, arg) {
    var Model, args, it, ref
    args = (ref = (arg != null ? arg : {}).args) != null ? ref : 'args'
    Model = require('../../db/' + model)
    it = function(stuff, cb) {
      var instance
      instance = Model(stuff[args])
      return instance.save(function() {
        var ret
        ret = {}
        ret[model] = instance
        return cb(ret)
      })
    }
    it.debug = "create(" + model + ")"
    return it
  },

  getSession(arg, cb) {
    var session
    session = arg.session
    return Session.validate(session, function(isValid) {
      if (isValid) {
        return Session.get(session, 'userId', function(userId) {
          if (userId) {
            return cb({
              userId: userId
            })
          } else {
            return cb({})
          }
        })
      } else {
        return cb({
          error: {
            id: 'invalid session',
            description: 'Session is invalid'
          }
        })
      }
    })
  },

  getLoggedInUser(args, cb) {
    if (args.user) {
      cb({})
      return
    }
    return t.getSession(args, function(arg) {
      var unauthorizedFail, user, userId
      userId = arg.userId
      unauthorizedFail = function() {
        return cb({
          error: {
            id: 'unauthorized',
            description: 'You are not logged in.'
          }
        })
      }
      if (userId == null) {
        unauthorizedFail()
        return
      }
      return user = User.find(userId, function(user) {
        if (user) {
          return cb({
            user: user
          })
        } else {
          return unauthorizedFail()
        }
      })
    })
  },

  validateArgs(validateName, arg) {
    var args, it, partial, ref, ref1, ref2, validate
    ref = arg != null ? arg : {}, partial = (ref1 = ref.partial) != null ? ref1 : false, args = (ref2 = ref.args) != null ? ref2 : 'args'
    validate = require('../../../common/validate/' + validateName)
    it = function(stuff, cb) {
      var result
      result = validate(stuff[args], {
        partial: partial
      })
      if (result.error != null) {
        return cb(result)
      } else {
        return cb({})
      }
    }
    it.debug = "validateArgs(" + validateName + ")"
    return it
  },

  ensureHasArgs(parameters) {
    var it
    it = function(arg, cb) {
      var args, i, len, p, ref
      args = arg.args
      ref = ['name', 'password']
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i]
        if (args[p] == null) {
          cb({
            error: {
              id: 'validation',
              description: "Missing `" + p + "` parameter"
            }
          })
        }
      }
      return cb({})
    }
    it.debug = "ensureHasArgs(" + parameters + ")"
    return it
  },

  select() {
    var it, keys
    keys = 1 <= arguments.length ? slice.call(arguments, 0) : []
    it = function(args, cb) {
      var i, key, len, ret
      ret = {}
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i]
        if (args[key] != null) {
          ret[key] = args[key]
        }
      }
      return cb(ret)
    }
    it.debug = "select(" + (JSON.stringify(keys)) + ")"
    return it
  },

  set(queryText) {
    var it, q, queries, query
    queries = queryText.trim().split("\n")
    q = (function() {
      var i, len, results1
      results1 = []
      for (i = 0, len = queries.length; i < len; i++) {
        query = queries[i]
        results1.push(parse(query))
      }
      return results1
    })()
    it = function(args, cb) {
      var i, len, val
      for (i = 0, len = q.length; i < len; i++) {
        query = q[i]
        val = query.getConstraintValue(args)
        if (val === void 0) {
          delete args[query.targetName][query.targetColumn]
        } else {
          if (query.targetColumn) {
            args[query.targetName][query.targetColumn] = val
          } else {
            args[query.targetName] = val
          }
        }
      }
      return cb({})
    }
    it.debug = "set(" + (JSON.stringify(queries)) + ")"
    return it
  },

  ensure(query, message) {
    var it, q
    q = parse(query)
    it = function(args, cb) {
      var constraint, ret, target
      constraint = q.getConstraintValue(args)
      target = q.getTargetValue(args)
      ret = null
      switch (q.operator) {
        case '==':
          if (constraint !== target) {
            ret = {
              error: {
                id: 'validation',
                description: "Expected " + q.targetName + " " + q.targetColumn + " to be " + target + ", but it was " + constraint,
                message: message
              }
            }
          }
          break
        case '!=':
          if (constraint === target) {
            ret = {
              error: {
                id: 'validation',
                description: "Expected " + q.targetName + " " + q.targetColumn + " to be different from " + target,
                message: message
              }
            }
          }
          break
        default:
          ret = {
            error: {
              id: 'unexpected error',
              description: "Bad operator " + q.operator,
              message: message
            }
          }
      }
      if (ret) {
        cb(ret)
      } else {
        cb({})
      }
    }
    it.debug = "ensure(" + query + ")"
    return it
  },

  retrieveAll(what) {
    var Model, it
    Model = require('../../db/' + what)
    it = function(arg, cb) {
      var args, ref
      args = (ref = arg.args) != null ? ref : {}
      return Model.where(args, function(results) {
        var i, len, r, ret
        for (i = 0, len = results.length; i < len; i++) {
          r = results[i]
          ret = {}
          ret[what] = r
          cb(ret)
        }
        if (Object.keys(args).length === 0) {
          return cb({
            sync: what
          })
        }
      })
    }
    it.debug = "retrieveAll(" + what + ")"
    return it
  },

  findOne(q, arg) {
    var it, last, query, ref, rename
    ref = arg != null ? arg : {}, rename = ref.rename, last = ref.last
    query = Query(q)
    it = function(args, cb) {
      return query.run(args, function(results) {
        var ret
        if (results.length === 0) {
          return cb({
            error: {
              id: 'does not exist',
              description: query.targetName + " doesn't have a " + query.constraintName,
              message: "Sorry, we couldn't find such a " + query.targetName
            }
          })
        } else {
          ret = {}
          ret[rename || query.targetName] = last ? results[0] : results[results.length - 1]
          return cb(ret)
        }
      })
    }
    it.debug = "findOne(" + q + ")"
    return it
  },

  findAll(q, arg) {
    var it, query, rename
    rename = (arg != null ? arg : {}).rename
    query = Query(q)
    it = function(args, cb) {
      var doneCb
      doneCb = null
      query.run(args, function(results) {
        var i, len, payloadName, r, ret
        payloadName = rename || query.targetName
        for (i = 0, len = results.length; i < len; i++) {
          r = results[i]
          ret = {}
          ret[payloadName] = r
          cb(ret)
        }
        return typeof doneCb === "function" ? doneCb() : void 0
      })
      return {
        then: function(dcb) {
          return doneCb = dcb
        }
      }
    }
    it.debug = "findOne(" + q + ")"
    return it
  },

  findNo(q, arg) {
    var it, last, query
    last = (arg != null ? arg : {}).last
    query = Query(q)
    it = function(args, cb) {
      return query.run(args, function(results) {
        if (results.length !== 0) {
          return cb({
            error: {
              id: 'duplicate',
              description: "This " + query.constraintName + " already has a " + query.targetName + "."
            }
          })
        } else {
          return cb({})
        }
      })
    }
    it.debug = "findNo(" + q + ")"
    return it
  },

  findOrCreateOne(what, args, argsfunc) {
    var create, find
    find = t.findOne(what, args)
    create = t.create(what)
    return function(args, cb) {
      return find(args, function(answer) {
        var a
        if (!(answer.error && answer.error.id === 'does not exist')) {
          return cb(answer)
        } else {
          a = argsfunc(args)
          return create(a, cb)
        }
      })
    }
  },

  remove(what) {
    var it
    it = function(stuff, cb) {
      return stuff[what].remove(function() {
        var ret
        ret = {}
        ret[what] = stuff[what]
        return cb(ret)
      })
    }
    it.debug = "remove(" + what + ")"
    return it
  },

  preventArgs() {
    var fields, it
    fields = 1 <= arguments.length ? slice.call(arguments, 0) : []
    it = function(arg, cb) {
      var args, f, i, len
      args = arg.args
      for (i = 0, len = fields.length; i < len; i++) {
        f = fields[i]
        if (args[f] != null) {
          cb({
            error: {
              id: 'forbidden',
              description: "`" + f + " is frozen and cannot be changed"
            }
          })
          return
        }
      }
      return cb({})
    }
    it.debug = "preventArgs(" + (fields.join(', ')) + ")"
    return it
  },

  save(what) {
    var it
    it = function(stuff, cb) {
      return stuff[what].save(function() {
        var ret
        ret = {}
        ret[what] = stuff[what]
        return cb(ret)
      })
    }
    it.debug = "save(" + what + ")"
    return it
  },

  update(what) {
    var it
    it = function(stuff, cb) {
      var args, k, v
      it = stuff[what]
      args = stuff.args
      for (k in args) {
        v = args[k]
        it.set(k, v)
      }
      return it.save(function() {
        var ret
        ret = {}
        ret[what] = it
        return cb(ret)
      })
    }
    it.debug = "update(" + what + ")"
    return it
  },

  ignoreError(func) {
    return function(stuff, cb) {
      return func(stuff, function(result) {
        if (result.error) {
          return cb({})
        } else {
          return cb(result)
        }
      })
    }
  }
}

export default t
