// Generated by CoffeeScript 1.12.4
(function() {
  var literalParse, parse;

  module.exports = parse = function(what) {
    var _, all, constraintColumn, constraintIsLiteral, constraintLiteral, constraintName, hasConstraint, operator, ref, rightArg, rightTarget, targetColumn, targetName;
    what = what.trim();
    all = /(\w+)(\.(\w+))?( ([^ ]+) (.*))?$/.exec(what);
    if (!all) {
      throw new Error("Could not parse " + what);
    }
    ref = all, all = ref[0], targetName = ref[1], _ = ref[2], targetColumn = ref[3], _ = ref[4], operator = ref[5], rightArg = ref[6];
    if (operator && rightArg) {
      hasConstraint = true;
      constraintIsLiteral = true;
      constraintLiteral = literalParse(rightArg);
      if (constraintLiteral === void 0) {
        rightTarget = /^(\w+)(\.(\w+))?$/.exec(rightArg);
        if (!rightTarget) {
          throw new Error("Could not parse " + rightArg);
        }
        constraintIsLiteral = false;
        _ = rightTarget[0], constraintName = rightTarget[1], _ = rightTarget[2], constraintColumn = rightTarget[3];
      }
    } else {
      hasConstraint = false;
    }
    if (operator === '=') {
      operator = '==';
    }
    return {
      targetName: targetName,
      targetColumn: targetColumn,
      constraintName: constraintName,
      constraintColumn: constraintColumn,
      operator: operator,
      hasConstraint: hasConstraint,
      constraintLiteral: constraintLiteral,
      constraintIsLiteral: constraintIsLiteral,
      getConstraintValue: function(args) {
        var c, cv;
        cv = constraintIsLiteral ? constraintLiteral : (c = args[constraintName], constraintColumn ? c.get != null ? c.get(constraintColumn) : c[constraintColumn] : c);
        return cv;
      },
      getTargetValue: function(args) {
        var t, tv;
        t = args[targetName];
        tv = targetColumn ? t.get != null ? t.get(targetColumn) : t[targetColumn] : t;
        return tv;
      }
    };
  };

  literalParse = function(str) {
    var e, literal;
    try {
      return literal = JSON.parse(str);
    } catch (error) {
      e = error;
    } finally {
      return literal;
    }
  };

}).call(this);
